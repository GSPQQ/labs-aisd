import itertools
import numpy as np
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox

def center_window(window):
    window.update_idletasks()
    width = window.winfo_width()
    height = window.winfo_height()
    x = (window.winfo_screenwidth() // 2) - (width // 2)
    y = (window.winfo_screenheight() // 2) - (height // 2)
    window.geometry(f'{width}x{height}+{x}+{y}')

def generate_matrices(K, T):
    """Генерация всех возможных матриц KxT с элементами 0, 1, 2"""
    combs = itertools.product([0, 1, 2], repeat=K * T)
    return [np.array(c).reshape(K, T) for c in combs]

def show_matrices(matrices, title):
    """Отображение матриц в отдельном окне"""
    sample_window = tk.Toplevel(root)
    sample_window.title(title)
    sample_window.geometry("600x400")
    
    text = scrolledtext.ScrolledText(sample_window, width=80, height=25, wrap=tk.NONE)
    text.pack(fill=tk.BOTH, expand=True)
    
    # Показываем только первые 10 матриц для примера
    for i, matrix in enumerate(matrices[:10]):
        text.insert(tk.END, f"Матрица {i+1}:\n")
        text.insert(tk.END, str(matrix) + "\n\n")
    
    # Показываем общее количество
    text.insert(tk.END, f"\nВсего сгенерировано матриц: {len(matrices)}\n")
    
    close_button = ttk.Button(sample_window, text="Закрыть", command=sample_window.destroy)
    close_button.pack(side=tk.BOTTOM, pady=10)
    
    center_window(sample_window)

def generate_and_show():
    try:
        K = int(entry_k.get())
        T = int(entry_t.get())
        
        if K <= 0 or T <= 0:
            raise ValueError
        
        # Проверка на слишком большие значения
        if K * T > 6:
            if not messagebox.askyesno("Предупреждение", 
                                     f"При K={K} и T={T} будет сгенерировано {3**(K*T)} матриц.\nЭто может занять много памяти. Продолжить?"):
                return
        
        output_text.delete(1.0, tk.END)
        output_text.insert(tk.END, f"Генерация матриц {K}x{T}...\n")
        root.update()  # Обновляем интерфейс
        
        # Генерируем матрицы
        matrices = generate_matrices(K, T)
        
        output_text.insert(tk.END, f"Готово! Сгенерировано {len(matrices)} матриц.\n")
        
        # Кнопка для просмотра матриц
        ttk.Button(output_frame, text="Показать матрицы", 
                 command=lambda: show_matrices(matrices, f"Матрицы {K}x{T}")).pack(pady=5)
    
    except ValueError:
        output_text.delete(1.0, tk.END)
        output_text.insert(tk.END, "Ошибка! Пожалуйста, введите натуральные числа больше 0.")

# Основное окно
root = tk.Tk()
root.title("Генератор матриц")
root.geometry("800x600")

# Центрируем главное окно
center_window(root)

# Фрейм для ввода
input_frame = ttk.Frame(root, padding="10")
input_frame.pack(fill=tk.X)

# Элементы ввода
ttk.Label(input_frame, text="K (строки):").pack(side=tk.LEFT, padx=5)
entry_k = ttk.Entry(input_frame, width=5)
entry_k.insert(0, "2")  # Значение по умолчанию
entry_k.pack(side=tk.LEFT, padx=5)

ttk.Label(input_frame, text="T (столбцы):").pack(side=tk.LEFT, padx=5)
entry_t = ttk.Entry(input_frame, width=5)
entry_t.insert(0, "2")  # Значение по умолчанию
entry_t.pack(side=tk.LEFT, padx=5)

# Кнопка генерации
generate_btn = ttk.Button(input_frame, text="Сгенерировать", command=generate_and_show)
generate_btn.pack(side=tk.LEFT, padx=10)

# Фрейм для вывода
output_frame = ttk.Frame(root, padding="10")
output_frame.pack(fill=tk.BOTH, expand=True)

# Текстовое поле с прокруткой
output_text = scrolledtext.ScrolledText(output_frame, width=100, height=25, wrap=tk.WORD)
output_text.pack(fill=tk.BOTH, expand=True)

# Предупреждение
warning_label = ttk.Label(root, text="Внимание: количество матриц растет как 3^(K*T)! Будьте осторожны с большими K и T.", 
                         foreground="red")
warning_label.pack(pady=5)

root.mainloop()
